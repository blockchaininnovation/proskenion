syntax = "proto3";
package proskenion;

import "objects.proto";

enum ErrCode {
    NoErr = 0;
    Anything = 1;
    Internal = 2;
    Sentence = 3;
    UnImplemented = 4;
    Assertation = 5;
    QueryVerify = 6;
    QueryValidate = 7;
    Type = 8;
    NotEnoughArgument = 9;
    FailedOperate = 10;
    UnExpectedReturnValue = 11;
    OutOfRange = 12;
    Undefined = 13;
}

message Prosl {
    repeated ProslOperator ops = 1;
}

// === ProslOperator ====
message ProslOperator {
    oneof op {
        SetOperator setOp = 1;
        IfOperator ifOp = 2;
        ElifOperator elifOp = 3;
        ElseOperator elseOp = 4;
        ErrCatchOperator errOp = 5;
        RequireOperator requireOp = 6;
        AssertOperator assertOp = 7;
        ReturnOperator returnOp = 8;
    }
}

message SetOperator {
    string variableName = 1;
    ValueOperator value = 2;
}

message IfOperator {
    ConditionalFormula op = 1;
    Prosl prosl = 2;
}

message ElifOperator {
    ConditionalFormula op = 1;
    Prosl prosl = 2;
}

message ElseOperator {
    Prosl prosl = 1;
}

message ErrCatchOperator {
    ErrCode code = 1;
    Prosl prosl = 2;
}

message RequireOperator {
    ConditionalFormula op = 1;
}

message AssertOperator {
    ConditionalFormula op = 1;
}

message ReturnOperator {
    ValueOperator op = 1;
}

message VariableOperator {
    string variableName = 1;
}

message IsDefinedOperator {
    string variableName = 1;
}

message VerifyOperator {
    ValueOperator op = 1;
}



// === ValueOperator ===
message ValueOperator {
    oneof op {
        QueryOperator queryOp = 1;
        TxOperator txOp = 2;
        CommandOperator cmdOp = 3;
        PlusOperator plusOp = 4;
        MinusOperator minusOp = 5;

        MultipleOperator mulOp = 6;
        DivisionOperator divOp = 7;
        ModOperator modOp = 8;
        OrOperator orOp = 9;
        AndOperator andOp = 10;
        XorOperator xorOp = 11;
        ConcatOperator concatOp = 12;

        ValuedOperator valuedOp = 13;
        IndexedOperator indexedOp = 14;

        VariableOperator variableOp = 15;
        Object object = 16;

        IsDefinedOperator isDefinedOp = 17;
        VerifyOperator verifyOp = 18;
    }
}

message QueryOperator {
    enum Order {
        DESC = 0;
        ASC = 1;
    }
    message OrderBy {
        string key = 1;
        Order order = 2;
    }
    ValueOperator authorizerId = 1;
    string select = 2;
    ObjectCode type = 3;
    ValueOperator from = 4;
    ValueOperator where = 5;
    OrderBy orderBy = 6;
    int32 limit = 7;
}

message CommandOperator {
    string command_name = 1;
    map<string, ValueOperator> params = 2;
}

message TxOperator {
    repeated ValueOperator commands = 1;
}

message PlusOperator {
    repeated ValueOperator ops = 1;
}

message MinusOperator {
    repeated ValueOperator ops = 1;
}

message MultipleOperator {
    repeated ValueOperator ops = 1;
}

message DivisionOperator {
    repeated ValueOperator ops = 1;
}

message ModOperator {
    repeated ValueOperator ops = 1;
}

message OrOperator {
    repeated ValueOperator ops = 1;
}

message AndOperator {
    repeated ValueOperator ops = 1;
}

message XorOperator {
    repeated ValueOperator ops = 1;
}

message ConcatOperator {
    repeated ValueOperator ops = 1;
}

message ValuedOperator {
    ValueOperator object = 1;
    ObjectCode type = 2;
    string key = 3;
}

message IndexedOperator {
    ValueOperator object = 1;
    ObjectCode type = 2;
    int32 index = 3;
}

// === CodntionalFormula ====
message ConditionalFormula {
    oneof op {
        OrFormula or = 1;
        AndFormula and = 2;
        NotFormula not = 3;
        EqFormula eq = 4;
        NeFormula ne = 5;
        GtFormula gt = 6;
        GeFormula ge = 7;
        LtFormula lt = 8;
        LeFormula le = 9;
    }
}

message OrFormula {
    repeated ValueOperator ops = 1;
}

message AndFormula {
    repeated ValueOperator ops = 1;
}

message NotFormula {
    ValueOperator op = 1;
}

message EqFormula {
    repeated ValueOperator ops = 1;
}

message NeFormula {
    repeated ValueOperator ops = 1;
}

message GtFormula {
    repeated ValueOperator ops = 1;
    }

message GeFormula {
    repeated ValueOperator ops = 1;
}

message LtFormula {
    repeated ValueOperator ops = 1;
}

message LeFormula {
    repeated ValueOperator ops = 1;
}