syntax = "proto3";
package proskenion;

import "objects.proto";


// Error は GRPC Error Code で返す
message ConsensusResponse {}
message CollectTxRequest {
    bytes blockHash = 1;
}
message PropagagateBlockRequest {
    oneof req {
        Block block = 1;
        Transaction transaction = 2;
    }
}
message PropopagateBlockResponse {
    Signature signature = 1;
}
// WIP

/**
 * ConsensusGate は合意形成に使用する rpc を定義する。
 * これを使用するのは合意形成に参加するPeerのみである。
 **/
service ConsensusGate {
    /**
     * PropagateTx は Client から受け取った Transaction を自分以外の Peer に伝搬させる。
     * Context には送信者の署名をつける。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) StatelessValidator で落ちる場合
     * AlreadyExist (code = 6) : One of following conditions:
     *  1 ) 既に同じ Transaction を受け取っていた場合
     * PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の 署名の主がPeerでない場合
     **/
    rpc PropagateTx (Transaction) returns (ConsensusResponse);


    /**
     * PropagateBlock は Commit する block を自分以外の Peer に伝搬させる。
     * Context には送信者の署名をつける。
     **/
    rpc PropagateBlock(stream PropagagateBlockRequest) returns (stream PropopagateBlockResponse);

    /**
     * CollectTx は blockHash をもとにその block に含まれる Transaction を取得する。
     **/
    rpc CollectTx(CollectTxRequest) returns (stream Transaction);
}
