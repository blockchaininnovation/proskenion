syntax = "proto3";
package proskenion;

import "objects.proto";


// Error は GRPC Error Code で返す
message ConsensusResponse {}
message CollectTxRequest {
    bytes blockHash = 1;
}
message PropagateBlockRequest {
    oneof req {
        Block block = 1;
        Transaction transaction = 2;
    }
}
message PropagateBlockResponse {
    Signature signature = 1;
}
// WIP

/**
 * ConsensusGate は合意形成に使用する rpc を定義する。
 * これを使用するのは合意形成に参加するPeerのみである。
 **/
service Consensus {
    /**
     * PropagateTx は Client から受け取った Transaction を自分以外の Peer に伝搬させる。
     * Context には送信者の署名をつける。
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) StatelessValidator で落ちる場合
     * PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の 署名の主がPeerでない場合
     **/
    rpc PropagateTx (Transaction) returns (ConsensusResponse);


    /**
     * PropagateBlock は Commit する block と txList を自分以外の Peer に伝搬させる。
     * Context には送信者の署名をつける
     *
     * InvalidArgument (code = 3) : One of following conditions:
     *  1 ) Block is nil.
     *  2 ) Block Verify failed.
     *  3 ) Transaction is nil.
     *  4 ) Transaction Verify failed.
     *  AlreadyExist (code = 6) : One of following conditions:
     *  1 ) Block is already exist in block queue.
     *  PermissionDenied (code = 7) : One of following conditions:
     *  1 ) Context の 署名の主がPeerでない場合
     **/
    rpc PropagateBlock(stream PropagateBlockRequest) returns (stream PropagateBlockResponse);
}
