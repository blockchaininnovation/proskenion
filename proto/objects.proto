syntax = "proto3";
package proskenion;

enum ObjectCode {
    AnythingObjectCode = 0;
    BoolObjectCode = 1;
    Int32ObjectCode = 2;
    Int64ObjectCode = 3;
    Uint32ObjectCode = 4;
    Uint64ObjectCode = 5;
    StringObjectCode = 6;
    BytesObjectCode = 7;
    AddressObjectCode = 8;
    SignatureObjectCode = 9;
    AccountObjectCode = 10;
    PeerObjectCode = 11;
    ListObjectCode = 12;
    DictObjectCode = 13;
    StorageObjectCode = 14;
    MegaStorageObjectCode = 15;
    CommandObjectCode = 16;
    TransactionObjectCode = 17;
    BlockObjectCode = 18;
}

message Address {
    string address = 1;
}

message Signature {
    bytes publicKey = 1;
    bytes signature = 2;
}

message Account {
    string accountId = 1;
    string accountName = 2;
    repeated bytes publicKeys = 3;
    int32 quorum = 4;
    int64 balance = 5;
    string delegatePeerId = 6;
}

message Peer {
    string peerId = 1;
    string address = 2;
    bytes publicKey = 3;
}

message ObjectList {
    repeated Object list = 1;
}

message ObjectDict {
    map<string, Object> dict = 1;
}

message Storage {
    map<string, Object> object = 1;
}

message MegaStorage {
    map<string, Object> meta = 1;
    // MerkleTree で管理
    bytes megaBinaryHash = 2;
}

// 参考 : https://triple-underscore.github.io/RFC2616-ja.html#section-3.6.1
message MegaBinaryChunk {
    // 全体
    int64 chunkSize = 1;
    // どこから始まるか
    int64 lastChunk = 2;
    bytes data = 3;
}


/**
 * ================ Command ================
 **/
message Command {
    string  authorizerId = 1;
    string targetId = 2;
    oneof command {
        CreateAccount createAccount = 3;
        AddBalance addBalance = 4;
        TransferBalance transferBalance = 5;
        AddPublicKeys addPublicKeys = 6;
        RemovePublicKeys removePublicKeys = 7;
        SetQuorum setQuorum = 8;
        DefineStorage defineStorage = 9;
        CreateStorage createStorage = 10;
        UpdateObject updateObject = 11;
        AddObject addObject = 12;
        TransferObject transferObject = 13;
        AddPeer addPeer = 14;
        ActivatePeer activatePeer = 15;
        SuspendPeer suspendPeer = 16;
        BanPeer banPeer = 17;
        Consign consign = 18;
        CheckAndCommitProsl checkAndCommitProsl = 19;
   }
}

/**
 * CerateAccount は TargetId の アカウントの生成を行う。
 **/
message CreateAccount {
    repeated bytes publicKeys = 1;
    int32 quorum = 2;
}

/**
 * AddBalance は targetId の amount を増やす。
 **/
message AddBalance {
    int64 balance = 1;
}

/**
 * Transfer Command は送金を行う。
 * targetId -> destAccountId
 **/
message TransferBalance {
    string destAccountId = 2;
    int64 balance = 3;
}

/**
 * AddPublicKey は TragetId アカウントに鍵を追加する。
 *
 **/
message AddPublicKeys {
    repeated bytes publicKeys = 1;
}

/**
 * RemovePublicKey は targetId アカウントの鍵を削除する。
 *
 **/
message RemovePublicKeys {
    repeated bytes publicKeys = 1;
}

/**
 * SetAccountQuorum は TargetId アカウントの quorum を更新する。
 **/
message SetQuorum {
    int32 quorum = 1;
}

/**
 * DefineStorage は Storage を定義する。
 */
message DefineStorage {
    Storage storage = 1;
}

/**
 * CreateStorage は 定義された Storage を target_id で指定されたアカウントで実体化
 */
message CreateStorage {}

/**
 * UpdateObject Command は Storage 内のObjectを更新する。
 **/
message UpdateObject {
    string key = 1;
    Object object = 2;
}

/**
 * AddObject Command は target_id で指定した Storage に Object を追加する。（list or dict)
 **/
message AddObject {
    string key = 1;
    Object object = 2;
}

/**
 * TransferObject Command は Storage 内の Object を key を指定して送る。（list or dict)
 **/
message TransferObject {
    string key = 1;
    string destAccountId = 2;
    Object object = 3;
}

/**
 * AddPeer Command は Peer を追加する。
 * targetId は Peer を一位に特定する id
 **/
message AddPeer {
    string address = 1;
    bytes publicKey = 2;
}

/**
 * ActivatePeer Command は Peer を active 状態にする。
 * targetId は Peer を一意に特定する。
 * active 状態の Peer は合意形成に参加できる。
 **/
message ActivatePeer {}

/**
 * SuspendPeer Command は Peer を 非active 状態にする。
 * targetId は Peer を一意に特定する。
 * 非active 状態の Peer は合意形成に参加しない。(Consign できない)
 **/
message SuspendPeer{}

/**
 * BanPeer Command は Peer を使用禁止にする。
 * targetId は Peer を一意に特定する。
 * ban された Peer は金輪際合意形成/同期に参加できない。
 **/
message BanPeer{}

/**
 * Consign Command は Account と Peer を紐付ける
 **/
message Consign {
    string peerId = 1;
}

/**
 * CheckAndCommitProsl は target_id で指定した prosl を
 *  variables に引数列を渡して change_update prosl が true を返した時
 *  incentive or consensus or change_update として再定義する。
 *
 **/
message CheckAndCommitProsl {
    map<string, Object> variables = 2;
}

/**
 * Transaction は Client が送信する取引の内容を記述したもの。
 **/
message Transaction {
    message Payload {
        int64 createdTime = 1;
        repeated Command commands = 2;
    }
    Payload payload = 1;
    repeated Signature signatures = 2;
}

/**
 * Block の構造
 * height : 現在のBlockのHeight+1
 * transactions : Transaction の集合（列)
 * createdTime : Blockを生成した時間(リーダーがProposalを生成した時間であり、Commitされた時間ではない)
 * commitTime : BlockをCommitされるべき時間(合意形成におけるそのRoundの終わりの時間)
 * preBlockHash : 現在の Block の Hash
 * signature : 現在のラウンドにおけるリーダーのSignature (hash = headerのHash + transactionsの累積Hash)
 **/
message Block {
    message Payload {
        int64 height = 1;
        bytes preBlockHash = 2;
        int64 createdTime = 3;
        bytes wsvHash = 4;
        bytes txHistoryHash = 5;
        bytes txsHash = 6;
        int32 round = 7;
    }
    Payload payload = 1;
    Signature signature = 3;
}

message Object {
    ObjectCode type = 1;
    oneof object {
        bool boolean = 2;
        int32 i32 = 3;
        int64 i64 = 4;
        uint32 u32 = 5;
        uint64 u64 = 6;
        string str = 7;
        bytes data = 8;
        string address = 9;
        Signature sig = 10;
        Account account = 11;
        Peer peer = 12;
        ObjectList list = 13;
        ObjectDict dict = 14;
        Storage storage = 15;
        MegaStorage megaStorage = 16;
        Command command = 17;
        Transaction transaction = 18;
        Block block = 19;
    }
}
